import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.filters.*

import java.text.SimpleDateFormat

buildscript {
   repositories {
       google()
       jcenter()
       maven {
           url 'https://plugins.gradle.org/m2/'
       }
    }

    dependencies {
        // Add dependency for build script,
        // so we can access Git from our
        // build script.
        classpath 'org.ajoberstar:grgit:1.1.0'
        classpath 'edu.sc.seis.gradle:launch4j:2.4.4'
    }
}
plugins {
    id 'com.gladed.androidgitversion' version '0.4.4'
    id "io.freefair.lombok" version "4.1.0"
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

apply plugin: 'java'
apply plugin:'application'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'edu.sc.seis.launch4j'


ext {
    // Open the Git repository in the current directory.
    git = Grgit.open(file('.'))

    // Get commit id of HEAD.
    revision = git.head().id
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionTag = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


mainClassName = 'com.mtecresults.rshappy.Driver'
group 'com.mtecresults'
project.version = getVersionTag()+"-${git.head().abbreviatedId}"


sourceCompatibility=1.8
targetCompatibility=1.8

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

findbugs {
    ignoreFailures = true
    //toolVersion = "2.0.1"
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    toolVersion = '5.1.3'
    ruleSets = [
            'java-android',
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

test {
    systemProperty "java.net.preferIPv4Stack", "true"
}

dependencies {
    implementation 'info.picocli:picocli:3.8.2'
    implementation 'com.google.guava:guava:19.0'
    implementation 'com.github.cmagnuson:mylaps-tcp-server:0.3.1'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.jmockit:jmockit:1.39'
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd HH:mm")
    //df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

task processSource(type: Copy) {
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [BUILDVERSION: getVersion(), BUILDTIME: buildTime()])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

launch4j {
    outfile = "rs-happy-${project.version}.exe"
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    headerType = "console"
    cmdLine = "--gui"
}
